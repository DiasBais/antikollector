<template>
  <div class="step2" v-on:click="onClickList($event)">
    <div class="step2__content">
      <div class="step2__loading">
        <div class="step2__loading-title">Шаг 2</div>
        <div class="step2__loading-show">
          <div class="step2__loading-show-filled"></div>
        </div>
      </div>
      <div class="step2__body">
        <div class="step2__right">
          <div class="step2__organizations">
            <div class="step2__organizations-header">
              <div class="step2__organizations-header-title"><span>-</span> МФО "I-CREDIT"</div>
              <div class="step2__organizations-delete">del</div>
            </div>
            <div class="step2__organizations-content">
              <div class="step2__organizationsLists">
                <p class="step2__organizations-title">Кому должен</p>
                <input type="text"
                       autocomplete="off"
                       v-model="mfos[acting].organization"
                       :style="(hideOrganization==='none'?'border-radius: 10px':'')"
                       v-on:click="onClickList"
                       v-on:keyup="enterOrganizationInput"
                       class="step2__organizations-input"
                >
                <div class="step2__organizationsList"
                     :style="'display: '+hideOrganization"
                >
                  <span class="step2__organizationsList-option"
                        v-for="(organization,index) in organizations"
                        :key="'O'+index"
                        v-html="organization.title"
                        :style="'display: '+organization.hide"
                        v-on:click="onClickOrganizationsListOption(index)"
                  ></span>
                </div>
              </div>
              <div class="step2__input">
                <p class="step2__input-title">Сколько должен</p>
                <div class="step2__input-part">
                  <input class="step2__input-value" type="number" autocomplete="off" v-model="mfos[acting].arrears" v-on:keydown="onKeyDownArrears($event)">
                  <span class="step2__input-price">тенге</span>
                </div>
              </div>
              <div class="step2__input">
                <p class="step2__input-title">Когда брал кредит</p>
                <input class="step2__input-value" type="date" autocomplete="off" v-model="mfos[acting].date">
              </div>

              <div class="step2__problems">
                <p class="step2__problems-title">Какая проблема</p>
                <input type="text"
                       autocomplete="off"
                       v-model="mfos[acting].problem"
                       :style="(hideProblem==='none'?'border-radius: 10px':'')"
                       v-on:click="onClickList"
                       v-on:keyup="enterProblemInput"
                       class="step2__problems-input"
                >
                <div class="step2__problemsList"
                     :style="'display: '+hideProblem"
                >
              <span class="step2__problemsList-option"
                    v-for="(problem,index) in problems"
                    :key="'P'+index"
                    v-html="problem.title"
                    :style="'display: '+problem.hide"
                    v-on:click="onClickProblemsListOption(index)"
              ></span>
                </div>
              </div>
              <div class="step2__descriptionProblems">
                <p class="step2__descriptionProblems-title">Опишите проблему</p>
                <input type="text" autocomplete="off" class="step2__descriptionProblems-input" v-model="mfos[acting].descriptionProblem">
              </div>
            </div>
          </div>
          <div class="step2__organizations">
            <div class="step2__organizations-header">
              <div class="step2__organizations-header-title"><span>-</span> МФО "I-CREDIT"</div>
              <div class="step2__organizations-delete">del</div>
            </div>
            <div class="step2__organizations-content">
              <div class="step2__organizationsLists">
                <p class="step2__organizations-title">Кому должен</p>
                <input type="text"
                       autocomplete="off"
                       v-model="mfos[acting].organization"
                       :style="(hideOrganization==='none'?'border-radius: 10px':'')"
                       v-on:click="onClickList"
                       v-on:keyup="enterOrganizationInput"
                       class="step2__organizations-input"
                >
                <div class="step2__organizationsList"
                     :style="'display: '+hideOrganization"
                >
                  <span class="step2__organizationsList-option"
                        v-for="(organization,index) in organizations"
                        :key="'O'+index"
                        v-html="organization.title"
                        :style="'display: '+organization.hide"
                        v-on:click="onClickOrganizationsListOption(index)"
                  ></span>
                </div>
              </div>
              <div class="step2__input">
                <p class="step2__input-title">Сколько должен</p>
                <div class="step2__input-part">
                  <input class="step2__input-value" type="number" autocomplete="off" v-model="mfos[acting].arrears" v-on:keydown="onKeyDownArrears($event)">
                  <span class="step2__input-price">тенге</span>
                </div>
              </div>
              <div class="step2__input">
                <p class="step2__input-title">Когда брал кредит</p>
                <input class="step2__input-value" type="date" autocomplete="off" v-model="mfos[acting].date">
              </div>

              <div class="step2__problems">
                <p class="step2__problems-title">Какая проблема</p>
                <input type="text"
                       autocomplete="off"
                       v-model="mfos[acting].problem"
                       :style="(hideProblem==='none'?'border-radius: 10px':'')"
                       v-on:click="onClickList"
                       v-on:keyup="enterProblemInput"
                       class="step2__problems-input"
                >
                <div class="step2__problemsList"
                     :style="'display: '+hideProblem"
                >
              <span class="step2__problemsList-option"
                    v-for="(problem,index) in problems"
                    :key="'P'+index"
                    v-html="problem.title"
                    :style="'display: '+problem.hide"
                    v-on:click="onClickProblemsListOption(index)"
              ></span>
                </div>
              </div>
              <div class="step2__descriptionProblems">
                <p class="step2__descriptionProblems-title">Опишите проблему</p>
                <input type="text" autocomplete="off" class="step2__descriptionProblems-input" v-model="mfos[acting].descriptionProblem">
              </div>
            </div>
          </div>
          <div class="step2__organizations">
            <div class="step2__organizations-header">
              <div class="step2__organizations-header-title"><span>-</span> МФО "I-CREDIT"</div>
              <div class="step2__organizations-delete">del</div>
            </div>
            <div class="step2__organizations-content">
              <div class="step2__organizationsLists">
                <p class="step2__organizations-title">Кому должен</p>
                <input type="text"
                       autocomplete="off"
                       v-model="mfos[acting].organization"
                       :style="(hideOrganization==='none'?'border-radius: 10px':'')"
                       v-on:click="onClickList"
                       v-on:keyup="enterOrganizationInput"
                       class="step2__organizations-input"
                >
                <div class="step2__organizationsList"
                     :style="'display: '+hideOrganization"
                >
                  <span class="step2__organizationsList-option"
                        v-for="(organization,index) in organizations"
                        :key="'O'+index"
                        v-html="organization.title"
                        :style="'display: '+organization.hide"
                        v-on:click="onClickOrganizationsListOption(index)"
                  ></span>
                </div>
              </div>
              <div class="step2__input">
                <p class="step2__input-title">Сколько должен</p>
                <div class="step2__input-part">
                  <input class="step2__input-value" type="number" autocomplete="off" v-model="mfos[acting].arrears" v-on:keydown="onKeyDownArrears($event)">
                  <span class="step2__input-price">тенге</span>
                </div>
              </div>
              <div class="step2__input">
                <p class="step2__input-title">Когда брал кредит</p>
                <input class="step2__input-value" type="date" autocomplete="off" v-model="mfos[acting].date">
              </div>

              <div class="step2__problems">
                <p class="step2__problems-title">Какая проблема</p>
                <input type="text"
                       autocomplete="off"
                       v-model="mfos[acting].problem"
                       :style="(hideProblem==='none'?'border-radius: 10px':'')"
                       v-on:click="onClickList"
                       v-on:keyup="enterProblemInput"
                       class="step2__problems-input"
                >
                <div class="step2__problemsList"
                     :style="'display: '+hideProblem"
                >
                  <span class="step2__problemsList-option"
                        v-for="(problem,index) in problems"
                        :key="'P'+index"
                        v-html="problem.title"
                        :style="'display: '+problem.hide"
                        v-on:click="onClickProblemsListOption(index)"
                  ></span>
                </div>
              </div>
              <div class="step2__descriptionProblems">
                <p class="step2__descriptionProblems-title">Опишите проблему</p>
                <input type="text" autocomplete="off" class="step2__descriptionProblems-input" v-model="mfos[acting].descriptionProblem">
              </div>
            </div>
          </div>
          <div class="step2__workMFO">
            <div class="step2__addMFO" v-on:click="step2__addMFO">+ Добавить МФО</div>
            <div class="step2__workMFO-content" v-if="(mfos.length>1)">
              <select class="step2__listMFOS-mobile step2__listMFOS-choose-mobile">
                <option class="step2__mfo-choose-mobile" value="choose" disabled selected>Выбрать</option>
                <option class="step2__mfo-choose-mobile"
                        v-for="(item,index) in (mfos.length)"
                        :key="'WW'+index"
                        v-on:click="step2__actMFO(index)"
                        :value="item"
                >
                  {{ item }}
                </option>
              </select>
              <select class="step2__listMFOS-mobile step2__listMFOS-delete-mobile">
                <option class="step2__mfo-delete-mobile" value="delete" disabled selected>Удалить</option>
                <option class="step2__mfo-delete-mobile"
                        v-for="(item,index) in (mfos.length)"
                        :key="'WWW'+index"
                        v-on:click="step2__delMFO(index)"
                        :value="item"
                >
                  {{ item }}
                </option>
              </select>
            </div>
          </div>
        </div>
        <div class="step2__left">
          <div class="step2__left-content" v-if="(mfos.length>1)">
            <div class="step2__mfo"
                 v-for="(item,index) in (mfos.length)"
                 :id="'W'+index"
                 :key="'W'+index"
                 v-on:mousemove="onMouseMoveMFO(index)"
                 v-on:mouseleave="onMouseleaveMFO(index)"
            >
              <img class="step2__mfo-act"
                   :src="imageMFO[index].imageAct"
                   v-on:click="step2__actMFO(index)"
              >
              <p>{{ item }}</p>
              <img class="step2__mfo-del"
                   :src="imageMFO[index].imageDel"
                   v-on:click="step2__delMFO(index)"
              >
            </div>
          </div>
        </div>
      </div>
      <div class="step2__file-drop-area">
        <div class="step2__add-file-drop-area" v-on:click="step2__addFDA">+ Добавить файлы</div>
        <div class="file-drop-area"
             v-for="(fileDropArea, index) in fileDropAreaCount"
             :key="'WW'+index"
        >
          <span class="fake-btn">Выбрать файлы</span>
          <span class="file-msg">или перетащите сюда файлы</span>
          <input class="file-input"
                 type="file"
                 :id="'file-'+index"
                 :name="'file-'+index"
                 v-on:click="onDFCFileInput(index)"
                 @dragenter="onDFCFileInput(index)"
                 @focus="onDFCFileInput(index)"
                 @dragleave="onDBRFileInput(index)"
                 @blur="onDBRFileInput(index)"
                 @drop="onDBRFileInput(index)"
                 v-on:change="onChangeFileInput($event, index)"
          >
        </div>
      </div>
      <div class="step2__footer">
        <div class="step2__error" v-if="error">Error: <span>{{ error }}</span></div>
        <div class="step2__transitions">
          <input class="step2__back" type="button" value="Назад" v-on:click="comeBackPage">
          <input class="step2__submit" type="button" value="Защитить меня" v-on:click="submitRequestSecondStep">
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import Vue from 'vue';
import VueSession from 'vue-session';
import {mapGetters} from "vuex";
Vue.use(VueSession);

export default {
  data() {
    return {
      acting: 0,
      fileDropAreaCount: 0,
      mfos: [
        {
          organization: '',
          arrears: '',
          date: '',
          problem: '',
          descriptionProblem: '',
        },
      ],
      organizations: [],
      hideOrganization: 'none',
      problems: [
        { title: 'Кредитор', hide: 'block' },
        { title: 'Коллектор', hide: 'block' },
        { title: 'ЧСИ (частный судебный исполнитель)', hide: 'block' },
        { title: 'Нотариус', hide: 'block' },
      ],
      hideProblem: 'none',
      error: '',
      token: '',
      imageMFO: [
        { imageAct: '/images/activeActive.png', imageDel: '/images/deleteActive.png' }
      ],
      activeImageAct: '/images/activeActive.png',
      activeImageDel: '/images/deleteActive.png',
      defaultImageAct: '/images/active.png',
      defaultImageDel: '/images/delete.png',
      imageChangeMoveActMFO: '/images/moveActive.png',
      imageChangeMoveDelMFO: '/images/moveDelete.png',
    }
  },
  mounted() {
    this.token = localStorage.getItem('token');
    if (!this.token && !localStorage.getItem('logged')) {
      localStorage.setItem('token', '');
      this.$store.commit('SET_LOGGED','');
      this.$router.push({path: '/'});
      this.$store.commit('SET_FOOTER',false);
    }
  },
  state () {
    return {
      storageOrganizations: '',
    }
  },
  computed: {
    ...mapGetters({
      storageOrganizations: 'getOrganizations',
    })
  },
  watch: {
    storageOrganizations: function () {
      console.log(this.storageOrganizations);
      this.organizations = this.storageOrganizations;
    },
  },
  methods: {
    step2__addFDA() {
      if (this.fileDropAreaCount < 5) this.fileDropAreaCount += 1;
    },
    onDFCFileInput(index) {
      document.getElementById('file-'+index).classList.add('is-active');
    },
    onDBRFileInput(index) {
      document.getElementById('file-'+index).classList.remove('is-active');
    },
    onChangeFileInput(e, index) {
      let filesCount = document.getElementById('file-'+index).files.length;
      let textContainer = document.getElementById('file-'+index).previousElementSibling;

      if (filesCount === 1) {
        // if single file is selected, show file name
        let fileName = document.getElementById('file-'+index).value.split('\\').pop();
        textContainer.textContent = fileName;
      } else {
        // otherwise show number of files
        textContainer.textContent = (filesCount + ' выбранные файлы');
      }
    },
    /*  */
    onMouseMoveMFO(index) {
      if (index !== this.acting) {
        this.imageMFO[index].imageAct = this.imageChangeMoveActMFO;
        this.imageMFO[index].imageDel = this.imageChangeMoveDelMFO;
      }
    },
    onMouseleaveMFO(index) {
      if (index !== this.acting) {
        this.imageMFO[index].imageAct = this.defaultImageAct;
        this.imageMFO[index].imageDel = this.defaultImageDel;
      }
    },
    step2__addMFO() {
      if (this.mfos.length < 10) {
        this.imageMFO.push({ imageAct: this.defaultImageAct, imageDel: this.defaultImageDel });
        this.mfos.push({organization:'',arrears:'',date:'',problem:''});
        this.step2__actMFO(this.mfos.length-1);
      }
      else this.error = 'Максимальная количество организации';
    },
    step2__actMFO(i) {
      this.imageMFO[this.acting].imageAct = this.defaultImageAct;
      this.imageMFO[this.acting].imageDel = this.defaultImageDel;
      this.acting = i;
      this.imageMFO[i].imageAct = this.activeImageAct;
      this.imageMFO[i].imageDel = this.activeImageDel;
      setTimeout(()=>{document.getElementsByClassName('step2__listMFOS-choose-mobile')[0].value = (i+1)},10);
      this.enterOrganizationInput();
      this.enterProblemInput();
    },
    step2__delMFO(index) {
      if (this.mfos.length > 0) {
        if (this.acting >= index) {
          this.acting -= 1;
          this.imageMFO[this.acting].imageAct = this.activeImageAct;
          this.imageMFO[this.acting].imageDel = this.activeImageDel;
          document.getElementsByClassName('step2__listMFOS-delete-mobile')[0].value = 'delete';
          document.getElementsByClassName('step2__listMFOS-choose-mobile')[0].value = this.acting;
          this.step2__actMFO(this.acting);
        }
        if (this.mfos.length-1 === index) {
          this.imageMFO.splice(this.imageMFO.indexOf(index));
          this.mfos.splice(this.mfos.indexOf(index));
          this.enterOrganizationInput();
          this.enterProblemInput();
        }
        else {
          for (let i = 0; i < this.mfos.length-1; i++) {
            if (index <= i) {
              this.imageMFO[i] = this.imageMFO[i+1];
              this.mfos[i] = this.mfos[i+1];
            }
          }
          this.imageMFO.splice(this.imageMFO.length-1, 1);
          this.mfos.splice(this.mfos.length-1, 1);
          this.enterOrganizationInput();
          this.enterProblemInput();
        }
      }
    },
    async submitRequestSecondStep() {
      this.error = '';
      if (this.validateStep2()) return;
      this.$store.commit('SET_LOADING', true);
      let newMFO = [ '' ];
      for (let i = 0; i < this.mfos.length; i++) {
        if (this.mfos.length-1 === i) newMFO[0] += this.mfos[i].organization+'-'+this.mfos[i].arrears+'-'+(this.mfos[i].date.split('-').join('.'))+'-'+this.mfos[i].problem+'-'+this.mfos[i].descriptionProblem;
        else newMFO[0] += this.mfos[i].organization+'-'+this.mfos[i].arrears+'-'+(this.mfos[i].date.split('-').join('.'))+'-'+this.mfos[i].problem+'-'+this.mfos[i].descriptionProblem+', ';
      }
      const axios = require('axios');
      await axios.post('https://crediter.kz/api/secondStep', {
        'organization': newMFO,
        'token': this.token,
      })
          .then(async response => {
            if (response.data.success) {
              this.$store.commit('SET_LOADING', false);
              await localStorage.setItem('token', this.token);
              await localStorage.setItem('mfos', JSON.stringify(this.mfos));
              await localStorage.setItem('priceMFOS', (10000+(this.mfos.length-1)*5000));
              this.$router.push({path: '/step-3'});
            }
            else {
              this.$store.commit('SET_LOADING', false);
              this.error = response.data.message;
            }
          })
          .catch(error => {
            this.$store.commit('SET_LOADING', false);
            this.error = error;
          });
    },
    onKeyDownArrears(e) {
      if (!(e.key >= '0' && e.key <= '9') && !(e.key === 'Backspace')) e.preventDefault();
    },
    comeBackPage() {
      window.history.back();
    },
    validateStep2() {
      for (let i = 0; i < this.mfos.length; i++) {
        if (!this.mfos[i].organization) {
          this.error = 'Поле['+i+'] кому должен обязательно для заполнения';
          return true;
        }
        else if (!this.mfos[i].arrears) {
          this.error = 'Поле['+i+'] сколько должен обязательно для заполнения';
          return true;
        }
        else if (!this.mfos[i].date) {
          this.error = 'Поле['+i+'] когда брал кредит обязательно для заполнения';
          return true;
        }
        else if (!this.mfos[i].problem) {
          this.error = 'Поле['+i+'] какая проблема обязательно для заполнения';
          return true;
        }
        else if (!this.mfos[i].descriptionProblem) {
          this.error = 'Поле['+i+'] опишите проблема обязательно для заполнения';
          return true;
        }
      }
      return false;
    },
    onClickList(e) {
      if (e.target.getAttribute('class') === 'step2__organizations-input' ||
          e.target.getAttribute('class') === 'step2__organizationsList' ||
          e.target.getAttribute('class') === 'step2__organizationsList-option'
      ) {
        this.hideProblem = 'none';
        this.hideOrganization = 'block';
        this.enterOrganizationInput();
      }
      else if (e.target.getAttribute('class') === 'step2__problems-input' ||
          e.target.getAttribute('class') === 'step2__problemsList' ||
          e.target.getAttribute('class') === 'step2__problemsList-option'
      ) {
        this.hideOrganization = 'none';
        this.hideProblem = 'block';
      }
      else {
        this.hideProblem = 'none';
        this.hideOrganization = 'none';
      }
    },
    enterOrganizationInput() {
      let organizationNames = [];
      // let organizationNamesHide = [];
      // console.log(this.organizations.toString());
      for (let i = 0; i < this.mfos.length; i++) organizationNames.push(this.mfos[i].organization.toLowerCase());
      // for (let i = 0; i < this.mfos.length; i++) {
      //   let organNameIndex = organizationNames.indexOf(mfosNames[i]);
      //   if (organNameIndex !== -1) this.organizations[organNameIndex].hide = false;
      // }
      // console.log(organizationNames.join(', '));
      if (this.mfos[this.acting].organization === '') {
        for (let i = 0; i < this.organizations.length; i++) {
          if (organizationNames.indexOf(this.organizations[i].title.toLowerCase()) === -1) {
            this.organizations[i].hide = 'block';
          }
        }
        return;
      }
      for (let i = 0; i < this.organizations.length; i++) {
        if (this.organizations[i].title.toLowerCase().indexOf(this.mfos[this.acting].organization.toLowerCase()) !== -1 &&
            this.organizations[i].title.toLowerCase() !== this.mfos[this.acting].organization.toLowerCase()
        ) {
          if (organizationNames.indexOf(this.organizations[i].title.toLowerCase()) === -1) {
            this.organizations[i].hide = 'block';
          }
        }
        else this.organizations[i].hide = 'none';
      }
    },
    onClickOrganizationsListOption(index) {
      this.mfos[this.acting].organization = this.organizations[index].title;
      this.enterOrganizationInput();
    },
    enterProblemInput() {
      if (this.mfos[this.acting].problem === '') {
        for (let i = 0; i < this.problems.length; i++) this.problems[i].hide = 'block';
        return;
      }
      for (let i = 0; i < this.problems.length; i++) {
        if (this.problems[i].title.toLowerCase().indexOf(this.mfos[this.acting].problem.toLowerCase()) !== -1 &&
            this.problems[i].title.toLowerCase() !== this.mfos[this.acting].problem.toLowerCase()) {
          this.problems[i].hide = 'block';
        }
        else this.problems[i].hide = 'none';
      }
    },
    onClickProblemsListOption(index) {
      this.mfos[this.acting].problem = this.problems[index].title;
      this.enterProblemInput();
    },
  }
}
</script>

<style>
@import url('/css/block/step2.css');
@import url('/css/block/mobile/step2.css');
</style>

